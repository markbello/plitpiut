generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UserProfilePicture {
  xs String
  sm String
  md String
  lg String
  xl String
}

model Post {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   String
  createdById String @db.ObjectId
  createdBy   User   @relation(fields: [createdById], references: [id])
  text        String
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  UNDISCLOSED
}

model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  birthday            String
  createdAt           String
  firstName           String
  followers           UserConnection[]   @relation("ConnectionFrom")
  following           UserConnection[]   @relation("ConnectionTo")
  gender              Gender
  lastName            String
  posts               Post[]
  profilePicture      UserProfilePicture
  slug                String
  bio                 String
  badgeConnections    BadgeConnection[]
  inworldCharacterUrl String?
  humanUserSub        String?
}

model Message {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  createdAt   DateTime  @default(now())
  createdById String    @db.ObjectId
  recipientId String    @db.ObjectId
  readAt      DateTime?
}

model UserConnection {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  fromUser   User     @relation(fields: [fromUserId], references: [id], name: "ConnectionFrom")
  fromUserId String   @db.ObjectId
  toUser     User     @relation(fields: [toUserId], references: [id], name: "ConnectionTo")
  toUserId   String   @db.ObjectId
  type       String
}

model Badge {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  imageName        String
  badgeConnections BadgeConnection[]
}

model BadgeConnection {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now()) @db.Date
  updatedAt DateTime? @default(now()) @db.Date
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  badgeId   String    @db.ObjectId
  badge     Badge     @relation(fields: [badgeId], references: [id])
}
